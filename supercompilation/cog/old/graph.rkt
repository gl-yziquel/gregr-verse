#lang racket
(require ("util.rkt")
(provide (all-defined-out))

(define graph-empty (hash))
(define (graph-add-src gr src) (hash-update gr src (lambda (x) x) '()))
(define (graph-add-edge gr src tgt)
  (graph-add-src (hash-update gr src (curry cons tgt) '()) tgt))
(define (graph-tgts gr src) (hash-ref gr src '()))
(define graph->alist hash->list)
(define (alist->graph as)
  (foldr (match-lambda** (((cons src tgt) gr) (graph-add-edge gr src tgt)))
         graph-empty as))
(define graph-srcs hash-keys)
(define (graph-reverse gr)
  (foldl (match-lambda**
           (((cons src tgts) gr)
            (foldr (lambda (tgt gr) (graph-add-edge gr tgt src)) gr tgts)))
         graph-empty (graph->alist gr)))
(define (graph-dfs gr srcs visited)
  (let search ((pending srcs) (visited visited) (finished '()))
    (foldl
      (match-lambda**
        ((src (list visited finished))
          (if (set-member? visited src) (list visited finished)
            (match-let* ((targets (graph-tgts gr src))
                        ((list visited finished)
                          (search targets (set-add visited src) finished)))
              (list visited (cons src finished))))))
      (list visited finished)
      pending)))
(define (graph-topsort gr)
  (match-let*
    (((list _ finished)
      (graph-dfs gr (graph-srcs gr) set-empty))
     (rgr (graph-reverse gr))
     ((list _ sccs)
      (foldl (match-lambda**
               ((src (list visited sccs))
                (match-let
                  (((list visited finished)
                    (graph-dfs rgr (list src) visited)))
                  (list visited
                        (if (null? finished) sccs (cons finished sccs))))))
             (list set-empty '()) finished)))
    sccs))
(define (scc-tgts gr scc)
  (set->list
    (set-subtract (foldl (lambda (src total)
                           (set-union (list->set (graph-tgts gr src)) total))
                         set-empty scc) (list->set scc))))
(define (scc-hash scc hm)
  (foldl (lambda (src hm) (hash-set hm src scc)) hm scc))
(define (sccs-hash sccs) (foldl scc-hash (hash) sccs))
(define (sccs-relevant gr sccs relevant start)
  (define scch (sccs-hash sccs))
  (define relevant-init
    (foldl (lambda (src rel)
             (set-union rel (list->set (hash-ref scch src))))
           set-empty (set->list relevant)))
  (define (src-relevant src visited relevant)
    (if (set-member? visited src) (list visited relevant)
      (match-let* ((scc (hash-ref scch src))
                   (sscc (list->set scc))
                   (tgts (scc-tgts gr scc))
                   (visited (set-union visited sscc))
                   ((list visited relevant)
                    (foldl (match-lambda**
                             ((src (list visited relevant))
                              (src-relevant src visited relevant)))
                           (list visited relevant) tgts)))
        (if (set-empty? (set-intersect (list->set tgts) relevant))
          (list visited relevant)
          (list visited (set-union relevant sscc))))))
  (cadr (foldl (lambda (src result)
                 (apply (curry src-relevant src) result))
               (list set-empty relevant-init) (set->list start))))
(define (sccs-filter sccs relevant)
  (filter (lambda (scc)
            (not (set-empty? (set-intersect relevant (list->set scc))))) sccs))

;(define test-graph
  ;(alist->graph '((a . b) (b . c) (b . d) (c . e) (d . e) (e . f))))
;(define test-graph2
  ;(alist->graph '((a . b) (b . c) (b . d) (c . e) (d . e) (e . f) (e . b))))
;(define test-tops (graph-topsort test-graph))
;(define test-tops2 (graph-topsort test-graph2))
;test-tops
;'((f) (e) (c) (d) (b) (a))
;test-tops2
;'((f) (c b e d) (a))
;(sccs-relevant test-graph test-tops (set 'a) (set 'b))
;(set 'a)
;(sccs-relevant test-graph test-tops (set 'b) (set 'a))
;(set 'a 'b)
;(sccs-relevant test-graph2 test-tops2 (set 'b) (set 'b))
;(set 'b 'c 'd 'e)
;(sccs-relevant test-graph2 test-tops2 (set 'a) (set 'b))
;(set 'a)
;(sccs-relevant test-graph2 test-tops2 (set 'b) (set 'a))
;(set 'b 'c 'd 'a 'e)
;(sccs-relevant test-graph2 test-tops2 (set 'f) (set 'a))
;(set 'b 'c 'd 'a 'f 'e)
;(sccs-filter test-tops2 (set 'a))
;'((a))
;(sccs-filter test-tops2 (set 'b))
;'((d b e c))
;(sccs-filter test-tops2 (set 'a 'b))
;'((d b e c) (a))
;(sccs-filter test-tops2 (set 'c 'f))
;'((f) (d b e c))
;(sccs-filter test-tops2 (set 'a 'd 'f))
;'((f) (d b e c) (a))
