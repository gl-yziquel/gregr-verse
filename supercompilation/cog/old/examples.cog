; map once
((lam nil-tag (lam cons-tag
  ((lam nil ((lam cons

    (let-rec
      ((map f (lam xs
        ((lam tag ((lam payload
          (if-0 tag
            nil
            (cons (f (pair-left payload)) (map f (pair-right payload))))
        ) (pair-right xs))) (pair-left xs)))))

      (map (lam x (cons x nil)) (cons (sym 1) (cons (sym 2) (cons (sym 3) nil)))))

  ) (lam head (lam tail (pair cons-tag (pair head tail)))))) (pair nil-tag ()))
 )) 0 1)


; map twice
((lam nil-tag (lam cons-tag
  ((lam nil ((lam cons

    (let-rec
      ((map f (lam xs
        ((lam tag ((lam payload
          (if-0 tag
            nil
              (cons (f (pair-left payload)) (map f (pair-right payload))))
        ) (pair-right xs))) (pair-left xs)))))

      (map (lam x (pair (sym thing) x)) (map (lam x (cons x nil)) (cons (sym 1) (cons (sym 2) (cons (sym 3) nil))))))

  ) (lam head (lam tail (pair cons-tag (pair head tail)))))) (pair nil-tag ()))
 )) 0 1)


;(((lam x (lam y (pair-left (pair x y))))
  ;(sym left)) (sym right))

;(((lam x (lam y (pair-right (pair x y))))
  ;(sym left)) (sym right))

;(let-rec
  ;((x arg (y arg))
   ;(y arg arg))
  ;(x ()))

; infinite loop
;(let-rec
  ;((x arg (y arg))
   ;(y arg (x arg)))
  ;(x ()))
